# -*- coding: utf-8 -*-
"""
Calculette de dose de produit de contraste ‚Äî Oncologie CT adulte
"""

import streamlit as st
import json
import os
import math
import base64
from datetime import datetime
import pandas as pd

CONFIG_FILE = "iodine_config.json"
USER_SESSIONS_FILE = "user_sessions.json"
LOG_FILE = "calc_audit.log"

default_config = {
    "charges": {str(kv): val for kv, val in zip([80, 90, 100, 110, 120], [0.35, 0.38, 0.40, 0.42, 0.45])},
    "concentration_mg_ml": 350,
    "portal_time": 30.0,
    "arterial_time": 25.0,
    "intermediate_enabled": False,
    "intermediate_time": 28.0,
    "acquisition_start_param": 70.0,
    "auto_acquisition_by_age": True,
    "max_debit": 6.0,
    "rincage_volume": 35.0,
    "rincage_delta_debit": 0.5,
    "calc_mode": "Charge iod√©e",
    "simultaneous_enabled": False,
    "target_concentration": 350,
    "volume_max_limit": 200.0
}

def load_json_safe(path, default):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return default.copy()
    return default.copy()

def save_json_atomic(path, data):
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)
    os.replace(tmp, path)

def audit_log(msg):
    try:
        ts = datetime.utcnow().isoformat()
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(f"{ts} - {msg}\n")
    except:
        pass

config = load_json_safe(CONFIG_FILE, default_config)
user_sessions = load_json_safe(USER_SESSIONS_FILE, {})

def save_config(cfg):
    save_json_atomic(CONFIG_FILE, cfg)

def save_user_sessions(sessions):
    save_json_atomic(USER_SESSIONS_FILE, sessions)

def calculate_bsa(weight, height):
    return math.sqrt((height * weight) / 3600.0)

def calculate_volume(weight, height, kv, concentration_mg_ml, imc, calc_mode, charges, volume_cap):
    kv_factors = {80: 11, 90: 13, 100: 15, 110: 16.5, 120: 18.6}
    concentration_g_ml = concentration_mg_ml / 1000.0
    if calc_mode == "Surface corporelle" or (calc_mode.startswith("Charge iod√©e sauf") and imc >= 30):
        bsa = calculate_bsa(weight, height)
        factor = kv_factors.get(kv, 15)
        volume = bsa * factor / concentration_g_ml
    else:
        charge_iodine = float(charges.get(str(kv), 0.4))
        volume = weight * charge_iodine / concentration_g_ml
        bsa = None
    volume = min(volume, volume_cap)
    return volume, bsa

def calculate_acquisition_start(age, cfg):
    if not cfg.get("auto_acquisition_by_age", True):
        return cfg.get("acquisition_start_param", 70.0)
    if age < 70:
        return cfg.get("acquisition_start_param", 70.0)
    elif 70 <= age <= 90:
        return float(age)
    else:
        return 90.0

def adjust_injection_rate(volume, injection_time, max_debit):
    rate = volume / injection_time
    if rate > max_debit:
        injection_time = volume / max_debit
        rate = max_debit
    return rate, injection_time

st.set_page_config(page_title="Calculette Contraste ‚Äî Oncologie CT adulte", page_icon="üíâ", layout="wide")

if "user_id" not in st.session_state:
    st.session_state["user_id"] = None

# --- Auth simple
if st.session_state["user_id"] is None:
    st.markdown("### üßë Connexion utilisateur")
    existing_ids = list(user_sessions.keys())
    chosen_id = st.selectbox("S√©lectionner un identifiant :", [""] + existing_ids)
    new_id = st.text_input("Cr√©er un nouvel identifiant")
    if st.button("Entrer"):
        if new_id.strip():
            if new_id in existing_ids:
                st.error("‚ö†Ô∏è Cet identifiant existe d√©j√†.")
            else:
                user_sessions[new_id] = {"programs": {}, "email": ""}
                save_user_sessions(user_sessions)
                st.session_state["user_id"] = new_id
        elif chosen_id:
            st.session_state["user_id"] = chosen_id
        else:
            st.warning("Veuillez choisir ou cr√©er un identifiant.")
    st.stop()

user_id = st.session_state["user_id"]
if user_id not in user_sessions:
    user_sessions[user_id] = {"programs": {}, "email": ""}
    save_user_sessions(user_sessions)

# --- Header
st.markdown(f"""
<div style="background:#124F7A;color:white;padding:10px;border-radius:10px;">
<h2>üíâ Calculette de dose de produit de contraste ‚Äî Oncologie CT adulte</h2>
</div>
""", unsafe_allow_html=True)

tab_patient, tab_params, tab_tutorial = st.tabs(["üßç Patient", "‚öôÔ∏è Param√®tres", "üìò Tutoriel"])

# --- Onglet PARAM√àTRES
with tab_params:
    st.header("‚öôÔ∏è Param√®tres ‚Äî Enregistr√©s dans votre espace personnel")
    st.markdown(f"**Identifiant connect√© :** `{user_id}`")

    st.subheader("Param√®tres techniques")
    config["auto_acquisition_by_age"] = st.checkbox("Activer l‚Äôajustement automatique du d√©part d‚Äôacquisition selon l‚Äô√¢ge", value=config.get("auto_acquisition_by_age", True))
    config["simultaneous_enabled"] = st.checkbox("Activer l‚Äôinjection simultan√©e", value=config.get("simultaneous_enabled", False))
    if config["simultaneous_enabled"]:
        config["target_concentration"] = st.number_input("Concentration cible (mg I/mL)", value=int(config.get("target_concentration", 350)), min_value=200, max_value=500, step=10)

    st.subheader("Autres param√®tres")
    config["concentration_mg_ml"] = st.selectbox("Concentration (mg I/mL)", [300, 320, 350, 370, 400], index=[300,320,350,370,400].index(int(config.get("concentration_mg_ml",350))))
    config["calc_mode"] = st.selectbox("M√©thode de calcul", ["Charge iod√©e","Surface corporelle","Charge iod√©e sauf IMC > 30 ‚Üí Surface corporelle"], index=["Charge iod√©e","Surface corporelle","Charge iod√©e sauf IMC > 30 ‚Üí Surface corporelle"].index(config.get("calc_mode","Charge iod√©e")))
    config["max_debit"] = st.number_input("D√©bit max (mL/s)", value=float(config.get("max_debit",6.0)), min_value=1.0, max_value=20.0, step=0.1)
    config["portal_time"] = st.number_input("Temps Portal (s)", value=float(config.get("portal_time",30.0)))
    config["arterial_time"] = st.number_input("Temps Art√©riel (s)", value=float(config.get("arterial_time",25.0)))
    config["intermediate_enabled"] = st.checkbox("Activer le temps interm√©diaire", value=config.get("intermediate_enabled", False))
    if config["intermediate_enabled"]:
        config["intermediate_time"] = st.number_input("Temps Interm√©diaire (s)", value=float(config.get("intermediate_time",28.0)))
    config["rincage_volume"] = st.number_input("Volume de rin√ßage (mL)", value=float(config.get("rincage_volume",35.0)))
    config["rincage_delta_debit"] = st.number_input("Œî D√©bit NaCl vs contraste (mL/s)", value=float(config.get("rincage_delta_debit",0.5)))
    if st.button("üíæ Sauvegarder param√®tres"):
        save_config(config)
        st.success("‚úÖ Param√®tres enregistr√©s !")

# --- Onglet PATIENT
with tab_patient:
    st.header("üßç Informations patient")

    col_w, col_h, col_birth, col_prog = st.columns([1,1,1,1.2])
    with col_w:
        weight = st.select_slider("Poids (kg)", options=list(range(20,201)), value=70)
    with col_h:
        height = st.select_slider("Taille (cm)", options=list(range(100,221)), value=170)
    with col_birth:
        birth_year = st.select_slider("Ann√©e de naissance", options=list(range(datetime.now().year-120, datetime.now().year+1)), value=datetime.now().year-40)
    with col_prog:
        prog_choice = st.selectbox("Programme", ["S√©lection d'un programme"] + list(user_sessions[user_id].get("programs", {}).keys()))

    # --- Affichage infos sous taille/naissance
    kv_current = 120
    st.markdown(f"""
    üßÆ **M√©thode utilis√©e :** {config.get("calc_mode","Charge iod√©e")}  
    üíä **Charge iod√©e appliqu√©e (kV {kv_current}) :** {config["charges"].get(str(kv_current),0.45)} g I/kg  
    üïí {"Ajustement automatique du d√©part d'acquisition selon l'√¢ge activ√©" if config.get("auto_acquisition_by_age") else "Ajustement automatique du d√©part d'acquisition d√©sactiv√©"}  
    üíß {"Injection simultan√©e activ√©e" if config.get("simultaneous_enabled") else "Injection simultan√©e d√©sactiv√©e"}  
    """)

    # --- Mode d'injection et kV sous poids
    st.subheader("Mode d‚Äôinjection")
    injection_modes = ["Portal","Art√©riel"]
    if config.get("intermediate_enabled", False):
        injection_modes.append("Interm√©diaire")
    injection_mode = st.radio("", injection_modes, horizontal=True)
    kv_scanner = st.radio("kV du scanner", [80,90,100,110,120], horizontal=True, index=4)

    # --- Calculs
    age = datetime.now().year - birth_year
    imc = weight / ((height/100)**2)
    base_time = config["portal_time"] if injection_mode=="Portal" else config["arterial_time"]
    if injection_mode=="Interm√©diaire":
        base_time = config["intermediate_time"]
        st.markdown("<span style='color:#E67E22'>‚ö†Ô∏è Pensez √† ajuster votre d√©part d‚Äôacquisition manuellement.</span>", unsafe_allow_html=True)

    acquisition_start = calculate_acquisition_start(age, config)
    st.markdown(f"""
    **Temps {injection_mode} :** {base_time:.0f} s  
    **D√©part d'acquisition :** {acquisition_start:.1f} s  
    **Concentration utilis√©e :** {int(config.get("concentration_mg_ml",350))} mg I/mL  
    """)

    volume, bsa = calculate_volume(weight, height, kv_scanner, config["concentration_mg_ml"], imc, config["calc_mode"], config["charges"], config["volume_max_limit"])
    rate, time = adjust_injection_rate(volume, base_time, config["max_debit"])

    # --- Bloc r√©sultats
    st.markdown("---")
    col_contrast, col_nacl = st.columns(2)
    with col_contrast:
        st.markdown(f"""
        <div style="background:#EAF1F8;padding:12px;border-radius:10px;text-align:center;">
        <h3>üü¢ Volume et D√©bit de contraste conseill√©s</h3>
        <h1>{int(round(volume))} mL @ {rate:.1f} mL/s</h1>
        </div>
        """, unsafe_allow_html=True)
    with col_nacl:
        if config.get("simultaneous_enabled", False):
            dilution_vol = max(0.0, volume * (config["target_concentration"]/config["concentration_mg_ml"]))
            rin√ß_vol = config["rincage_volume"]
            rin√ß_rate = max(0.1, rate - config["rincage_delta_debit"])
            st.markdown(f"""
            <div style="background:#EAF1F8;padding:12px;border-radius:10px;text-align:center;">
            <h3>üîµ Volume et D√©bit de NaCl conseill√©s</h3>
            üíß Dilution NaCl : {int(round(dilution_vol))} mL<br>
            üíß Rin√ßage : {int(round(rin√ß_vol))} mL @ {rin√ß_rate:.1f} mL/s
            </div>
            """, unsafe_allow_html=True)
        else:
            rin√ß_vol = config["rincage_volume"]
            rin√ß_rate = max(0.1, rate - config["rincage_delta_debit"])
            st.markdown(f"""
            <div style="background:#EAF1F8;padding:12px;border-radius:10px;text-align:center;">
            <h3>üîµ Volume et D√©bit de NaCl conseill√©s</h3>
            üíß Volume : {int(round(rin√ß_vol))} mL<br>
            üíß D√©bit : {rin√ß_rate:.1f} mL/s
            </div>
            """, unsafe_allow_html=True)

# --- Onglet TUTORIEL
with tab_tutorial:
    st.header("üìò Tutoriel ‚Äî bas√© sur le CIRTACI 5.3.0 (2020)")
    st.markdown("""
    Ce module de calcul est con√ßu selon les principes de la fiche CIRTACI VASCULAIRE (version 5.3.0, 2020).
    - Calcul des volumes selon charge iod√©e / BSA.
    - Ajustement automatique possible selon l‚Äô√¢ge.
    - Injection simultan√©e configurable.
    [üìÑ Consulter les recommandations officielles CIRTACI](https://www.radiologie.fr/sites/www.radiologie.fr/files/medias/documents/CIRTACI%20Fiche%20GeÃÅneÃÅraliteÃÅs%20VASCULAIRE_5_3_1.pdf)
    """)

# --- Footer
st.markdown("""
<div style='text-align:center;margin-top:20px;font-size:0.8rem;color:#666;'>
¬© 2025 Guerbet | D√©velopp√© par <b>S√©bastien Partouche</b><br>
Calculette de dose de produit de contraste en oncologie CT adulte.<br>
<a href='https://www.radiologie.fr/sites/www.radiologie.fr/files/medias/documents/CIRTACI%20Fiche%20GeÃÅneÃÅraliteÃÅs%20VASCULAIRE_5_3_1.pdf' target='_blank'>
üîó Recommandations CIRTACI 5.3.0 (2020)
</a>
</div>
""", unsafe_allow_html=True)
